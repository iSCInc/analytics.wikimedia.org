define("text!components/breakdown-toggle/breakdown-toggle.html",[],function(){return'<div class="ui secondary inverted vertical fluid menu">\n    <a class="header item" data-bind="css: {\'off\': !display()}, click: toggle">\n        <span class="default text">\n            <i class="block layout icon"></i>\n            Data Breakdowns\n        </span>\n    </a>\n    <!-- ko if: display() -->\n    <div class="colored menu">\n    <!-- ko foreach: columns()-->\n        <div class="item">\n            <label class="clickable">\n                <i class="circle icon"></i>\n                <span data-bind="text: label"></span>\n\n                <input type="checkbox" data-bind="disable: selected() && $parents[0].isOnlyOneSelected(),checked: selected ">\n                <svg height="10" width="100%">\n                    <path stroke="white"\n                          data-bind="attr: {\'stroke-dasharray\': pattern}"\n                          d="M6 5 l215 0" />\n                </svg>\n            </label>\n        </div>\n    <!-- /ko -->\n    </div>\n    <!-- /ko -->\n</div>\n'}),define("components/breakdown-toggle/breakdown-toggle",["require","knockout","text!./breakdown-toggle.html"],function(t){function e(t,e){var n=[];return t&&t.breakdown&&t.breakdown.columns.forEach(function(t,i){var a=i%e.length;n.push({selected:s.observable(!0),label:t,pattern:e[a]})}),n}function n(t){this.patterns=t.patterns,this.metric=t.metric,this.dashes=this.patterns.map(function(t){return t.toString()}),this.display=s.observable(!1),this.columns=t.breakdownColumns,t.metric.subscribe(function(){this.display(!1),this.columns([])}.bind(this)),this.toggle=function(){this.columns(this.display()?[]:e(this.metric(),this.dashes)),this.display(!this.display())},this.isOnlyOneSelected=s.computed(function(){if(this.columns){for(var t=this.columns().length,e=0,n=0;t>n;n++){var s=this.columns()[n];s.selected()&&e++}return 1===e}}.bind(this))}var s=t("knockout"),i=t("text!./breakdown-toggle.html");return{viewModel:n,template:i}});