define("text!components/controls/breakdown-toggle/breakdown-toggle.html",[],function(){return'<div class="ui inverted vertical fluid main menu">\n    <a class="item" data-bind="css: {\'active\': display()}, click: toggle">\n        <span>\n            <i class="large block layout icon"></i>\n            Break Down by Site\n        </span>\n    </a>\n    <!-- ko if: display() -->\n    <div class="colored menu">\n    <!-- ko foreach: columns()-->\n        <div class="item">\n            <label class="clickable">\n                <i class="circle icon"></i>\n                <span data-bind="text: label"></span>\n\n                <input type="checkbox" data-bind="disable: selected() && $parents[0].isOnlyOneSelected(), checked: selected">\n                <svg height="10" width="100%">\n                    <path stroke="white"\n                          data-bind="attr: {\'stroke-dasharray\': pattern}"\n                          d="M6 5 l215 0" />\n                </svg>\n            </label>\n        </div>\n    <!-- /ko -->\n    </div>\n    <!-- /ko -->\n</div>\n'}),define("components/controls/breakdown-toggle/breakdown-toggle",["require","knockout","text!./breakdown-toggle.html"],function(n){function t(n,t){var e=[];return n&&n.breakdown&&n.breakdown.columns.forEach(function(n,i){var a=i%t.length;e.push({selected:s.observable(!0),label:n,pattern:t[a]})}),e}function e(n){this.patterns=n.patterns,this.metric=n.metric,this.dashes=this.patterns.map(function(n){return n.toString()}),this.display=s.observable(!1),this.columns=n.breakdownColumns,n.metric.subscribe(function(){this.display(!1),this.columns([])}.bind(this)),this.toggle=function(){this.display()?this.columns([]):this.columns(t(this.metric(),this.dashes)),this.display(!this.display())},this.isOnlyOneSelected=s.computed(function(){if(this.columns){for(var n=this.columns().length,t=0,e=0;e<n;e++){var s=this.columns()[e];s.selected()&&t++}return 1===t}}.bind(this))}var s=n("knockout"),i=n("text!./breakdown-toggle.html");return{viewModel:e,template:i}});